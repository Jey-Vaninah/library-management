openapi: 3.0.0
info:
  title: STD23042 - TD1
  version: 1.0.0
servers:
  - url: https://localhost.std23042.com
paths:
  /groups:
    get:
      tags:
        - Groups
      summary: Get all groups
      operationId: getGroups
      parameters:
        - name: groupName
          in: query
          description: Filter groups by name
          required: false
          schema:
            type: string
        - name: groupYearFrom
          in: query
          description: Filter groups after this date
          required: false
          schema:
            type: string
            format: date
            example: 2023-01-01
        - name: groupYearTo
          in: query
          description: Filter groups before this date
          required: false
          schema:
            type: string
            format: date
            example: 2023-12-31
        - $ref: "#/components/parameters/QueryPaginationPage"
        - $ref: "#/components/parameters/QueryPaginationPageSize"
      responses:
        200:
          $ref: "#/components/responses/ListOfGroup200"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
    post:
      tags:
        - Groups
      summary: Create a new group
      operationId: createGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CrupdateGroup"
      responses:
        200:
          $ref: "#/components/responses/Group200"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
    put:
      tags:
        - Groups
      summary: Update an existing group
      operationId: updateGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CrupdateGroup"
      responses:
        200:
          $ref: "#/components/responses/Group200"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
  /groups/{id}:
    delete:
      tags:
        - Groups
      summary: Delete a group
      operationId: deleteGroup
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          $ref: "#/components/responses/Group200"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
  
  /groups/{groupId}/students/{studentId}:
    put:
      tags:
        - Groups 
      summary: Attach on student to one group  
      operationId: attachOneStudentToOneGroup 
      parameters:
        - name: groupId 
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: studentId 
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          $ref: "#/components/responses/Group200"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
  /groups/students:
    put:
      tags:
        - Groups 
      summary: Attach students to groups  
      operationId: attachStudentsToGroups 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/UpdateStudentGroup"
      responses:
        200:
          $ref: "#/components/responses/ListOfUpdatedStudentGroup200"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"

  /students/page/{page}/pageSize/{pageSize}:
    get:
      tags:
        - Students
      summary: Get all Students
      operationId: getStudents
      parameters:
        - name: name 
          in: query
          description: Filter student by name
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/PathPaginationPage"
        - $ref: "#/components/parameters/PathPaginationPageSize"

      responses:
        200:
          $ref: "#/components/responses/ListOfStudents200"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
    post:
      tags:
        - Students
      summary: Create a new student
      operationId: createStudent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Student"
      responses:
        200:
          $ref: "#/components/responses/Student200"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
    put:
      tags:
        - Students
      summary: Update an existing student
      operationId: updateStudent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Student"
      responses:
        200:
          $ref: "#/components/responses/Student200"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
  /students/{id}:
    delete:
      tags:
        - Students
      summary: Delete an student
      operationId: deleteStudent
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          $ref: "#/components/responses/Student200"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
components:
  schemas:
    UpdateStudentGroup:
      type: object
      properties:
        groupId:
          type: string
          format: uuid
          example: J2
        studentId:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174000
    CrupdateGroup:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        name:
          type: string
          example: J2
        year:
          type: string
          format: date
          example: 2023
        effective:
          type: integer
          example: 45
        promotion:
          $ref: "#/components/schemas/Promotion"
    Group:
      type: object
      allOf:
        - $ref: "#/components/schemas/CrupdateGroup"
      properties:
        students:
          type: array
          items:
            $ref: "#/components/schemas/Student"
    Promotion:
      type: string
      enum:
        - G
        - H
        - J
        - K
    Student:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 471eae60-abba-4732-b2a0-2e2b4d04cea1
        name:
          type: string
          example: Lucas Clavel
        birthdate:
          type: string
          format: date
          example: 09-10-03 
        reference:
          type: string
          example: STD23042
        group:
          type: string
          example: J2
        sex:
          $ref: '#/components/schemas/Sex'
    Sex:
      type: string
      enum:
        - M
        - F
    ApiResponse:
      type: object
      properties:
        status:
          type: object
          properties:
            code:
              type: number
              example: 200
            message:
              type: string
              example: OK
        body:
            type: object
  responses:
    Student200:
      description: One Student 
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ApiResponse"
            properties:
              body: 
                $ref: "#/components/schemas/Student"
    ListOfStudents200:
      description: List of student 
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ApiResponse"
            properties:
              body: 
                type: array
                items:
                  $ref: "#/components/schemas/Student"
    Group200:
      description: One group 
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ApiResponse"
            properties:
              body: 
                $ref: "#/components/schemas/Group"
    ListOfUpdatedStudentGroup200:
      description: List of updateStudentGroup
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ApiResponse"
            properties:
              body: 
                type: array
                items:
                  $ref: "#/components/schemas/UpdateStudentGroup"
    ListOfGroup200:
      description: List of groups 
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ApiResponse"
            properties:
              body: 
                type: array
                items:
                  $ref: "#/components/schemas/Group"
    400:
      description: bad request
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: "#/components/schemas/ApiResponse"
            default:
              status:
                code: 400
                message: BAD REQUEST
              body:
                error: Incorrect request
    403:
      description: forbidden
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: "#/components/schemas/ApiResponse"
            default:
              status:
                code: 403
                message: FORBIDDEN
              body:
                error: access denied
    500:
      description: internal server erreur
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: "#/components/schemas/ApiResponse"
            default:
              status:
                code: 500
                message: INTERNAL SERVER ERREUR
              body:
                error: internal server erreur
  parameters:
    PathPaginationPage:
      name: page
      in: path 
      required: true 
      description: Page to retrieve
      schema:
        type: integer
        default: 1
    PathPaginationPageSize:
      name: pageSize
      in: path
      required: true 
      description: PageSize to retrieve for each page
      schema:
        type: integer
        default: 50 
    QueryPaginationPage:
      name: page
      in: query
      required: false 
      description: Page to retrieve
      schema:
        type: integer
        default: 1
    QueryPaginationPageSize:
      name: pageSize
      in: query
      required: false 
      description: PageSize to retrieve for each page
      schema:
        type: integer
        default: 50 