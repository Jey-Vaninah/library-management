openapi: 3.0.0
info:
  title: STD23042 - TD1
  version: 1.0.0
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/HEIVANINAH/library/1.0.0
  - url: https://localhost.std23042.com
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      operationId: getBooks
      parameters:
        - name: bookName
          in: query
          description: Filter books by name
          required: false
          schema:
            type: string
        - name: releaseDateFrom
          in: query
          description: Filter books released after this date
          required: false
          schema:
            type: string
            format: date
            example: 2023-01-01
        - name: releaseDateTo
          in: query
          description: Filter books released before this date
          required: false
          schema:
            type: string
            format: date
            example: 2023-12-31
        - $ref: "#/components/parameters/QueryPaginationPage"
        - $ref: "#/components/parameters/QueryPaginationPageSize"
      responses:
        '200':
          description: List of all books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
    post:
      tags:
        - Books
      summary: Create a new book
      operationId: createBook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CrupdateBook"
      responses:
        '201':
          description: Book created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
    put:
      tags:
        - Books
      summary: Update an existing book
      operationId: updateBook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CrupdateBook"
      responses:
        '200':
          description: Book updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - Books
      summary: Link Book to Author
      operationId: linkBookToAuthor
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: authorId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Book updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
  /books/authors:
    put:
      tags:
        - Books
      summary: Link list of Book to Authors
      operationId: linkListOfBookToAuthors
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/UpdateBookAuthor"
      responses:
        '200':
          description: Book updated successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
  /books/{id}:
    delete:
      tags:
        - Books
      summary: Delete a book
      operationId: deleteBook
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Book deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
  /authors/page/{page}/pageSize/{pageSize}:
    get:
      tags:
        - Authors
      summary: Get all Authors
      operationId: getAuthors
      parameters:
      - name: name 
        in: query
        description: Filter authors by name
        required: false
        schema:
          type: string
      - $ref: "#/components/parameters/PathPaginationPage"
      - $ref: "#/components/parameters/PathPaginationPageSize"
      responses:
        '200':
          description: List of all authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"
    post:
      tags:
        - Authors
      summary: Create a new author
      operationId: createAuthor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Author"
      responses:
        '201':
          description: Author created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Author"
    put:
      tags:
        - Authors
      summary: Update an existing author
      operationId: updateAuthor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Author"
      responses:
        '200':
          description: Author updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Author"
  /authors/{id}:
    delete:
      tags:
        - Authors
      summary: Delete an author
      operationId: deleteAuthor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Author deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Author"
components:
  schemas:
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
          format: uuid
          example: J2
        authorId:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174000
    Book:
      type: object
      allOf:
        - $ref: "#/components/schemas/CrupdateBook"
      properties:
        author:
          $ref: "#/components/schemas/Author"
    CrupdateBook:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        bookName:
          type: string
          example: Larouse
        pageNumbers:
          type: number
          example: 50
        releaseDate:
          type: string
          format: date
          example: 1925-04-10 
        topic:
          $ref: "#/components/schemas/Topic"      
    Topic:
      type: string
      enum:
        - ROMANCE
        - COMEDY
        - OTHER
    Author:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 471eae60-abba-4732-b2a0-2e2b4d04cea1
        name:
          type: string
          example: Lucas Clavel
        sex:
          $ref: '#/components/schemas/Sex'
    Sex:
      type: string
      enum:
        - M
        - F
  parameters:
    PathPaginationPage:
      name: page
      in: path 
      required: true 
      description: Page to retrieve
      schema:
        type: integer
        default: 1
    PathPaginationPageSize:
      name: pageSize
      in: path
      required: true 
      description: PageSize to retrieve for each page
      schema:
        type: integer
        default: 50 
    QueryPaginationPage:
      name: page
      in: query
      required: false 
      description: Page to retrieve
      schema:
        type: integer
        default: 1
    QueryPaginationPageSize:
      name: pageSize
      in: query
      required: false 
      description: PageSize to retrieve for each page
      schema:
        type: integer
        default: 50 